{"version":3,"file":"static/css/main.6ba94221.css","mappings":"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","sources":["index.css","components/Status/index.scss","styles/constants.scss","styles/includeMedia.scss","components/Input/index.scss","components/Arbor/index.scss","components/Definitions/index.scss","components/InformationPanel/index.scss","components/Layout/index.scss","components/Title/index.scss","components/Footer/index.scss","styles/global.scss"],"sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","@use '../../styles/constants.scss' as *;\n\n.status {\n  position: absolute;\n  left: 1px;\n  top: 0;\n  transform: translateY(calc(-100% - 0.25rem));\n  color: $color-background;\n\n  @include media($break-sm) {\n    left: 0.5rem;\n  }\n\n  &.error {\n    color: $color-error;\n  }\n\n  .loader {\n    display: inline-block;\n    width: 4rem;\n\n    &.hidden {\n      opacity: 0;\n      pointer-events: none;\n    }\n\n    img {\n      width: 100%;\n      filter: saturate(0.3) brightness(0.65);\n      margin-bottom: -1.5rem;\n    }\n  }\n}\n","@forward './includeMedia.scss';\n\n$break-xs: \"<376px\";\n$break-sm: \"<768px\";\n$break-md: \">=768px\";\n$break-lg: \">1024px\";\n\n$typeface-primary: 'EB Garamond', serif;\n$typeface-secondary: 'Assistant', sans-serif;\n\n$color-primary: #596869;\n$color-secondary: #515751;\n$color-highlight: #f5f9e9;\n$color-background: rgb(42, 71, 46);\n$color-accent: #c2c1a5;\n$color-error: #8a2121;\n$color-white: white;\n\n$border-radius: 5px;\n\n$box-shadow: 2px 2px 8px 2px rgba(25, 25, 25, 0.3);\n$text-shadow: 2px 2px 4px rgba(25, 25, 25, 0.2);\n\n@mixin flex($direction: row, $justify: center, $align: center) {\n  display: flex;\n  justify-content: $justify;\n  align-items: $align;\n  flex-direction: $direction;\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","@use '../../styles/constants.scss' as *;\n\n.input {\n  position: relative;\n  background-color: rgba(255, 255, 255, 0.4);\n  box-shadow: $box-shadow;\n  backdrop-filter: blur(4px);\n  border-radius: $border-radius;\n\n  @include media($break-sm) {\n    border-radius: 0;\n  }\n\n  .input-form {\n    width: 100%;\n    background-color: transparent;\n    overflow: visible;\n    position: relative;\n    z-index: 1;\n    border-left: none;\n    border-bottom: none;\n    box-sizing: border-box;\n    display: flex;\n    justify-content: center;\n\n    @include media($break-sm) {\n      flex-wrap: wrap;\n    }\n\n    .input-box-container {\n      flex: 2;\n      position: relative;\n      display: flex;\n      background-color: rgba(255, 255, 255, 0.5);\n      border-left: 1px solid rgba(0, 0, 0, 0.4);\n      border-right: 1px solid rgba(0, 0, 0, 0.4);\n\n      @include media($break-sm) {\n        width: 100%;\n        flex: auto;\n        order: 2;\n        border-left: none;\n        border-right: none;\n        border-top: 1px solid rgba(42, 71, 46, 0.4);\n      }\n    }\n    \n    .input-box {\n      border: none;\n      box-sizing: border-box;\n      padding: 0.5rem 1rem;\n      font-family: 'EB Garamond', serif;\n      font-size: 1.5rem;\n      text-align: center;\n      outline: none;\n      color: $color-background;\n      transition: all 200ms ease-out;\n      background-color: transparent;\n      width: 100%;\n  \n      &::placeholder {\n        color: $color-background;\n      }\n\n      &:focus {\n        &::placeholder {\n          color: rgba(42, 71, 46, 0.5)\n        }\n      }\n  \n      &:disabled {\n        color: rgba(42, 71, 46, 0.5);\n      }\n    }\n  }\n\n  .search-bar-button-container {\n    position: relative;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    width: 3rem;\n\n    @include media($break-sm) {\n      width: auto;\n    }\n\n    &::before {\n      content: '';\n      position: absolute;\n      border-left: 1px solid rgba(42, 71, 46, 0.4);\n      left: 0;\n      top: 50%;\n      height: 60%;\n      transform: translateY(-50%);\n    }\n\n    span {\n      color: $color-background;\n      transition: color 0.2s ease-out;\n\n      &:hover {\n        font-size: 1.7rem;\n      }\n    }\n\n    &.disabled {\n      cursor: default;\n      pointer-events: none;\n\n      span {\n        color: rgba(0, 0, 0, 0.4);\n\n        &:hover {\n          font-size: 1.5rem;\n        }\n      }\n    }\n  }\n\n  .lang-select-container {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    transition: all 0.2s ease-out;\n\n    @include media($break-sm) {\n      flex: auto;\n      width: 100%;\n      padding: 0.25rem 0;\n      order: 1;\n      box-sizing: border-box;\n    }\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.1);\n    }\n\n    &.disabled {\n      pointer-events: none;\n      background-color: rgba(0, 0, 0, 0.1);\n    }\n    \n    .lang-select {\n      background-color: transparent;\n      border: none;\n      border-radius: 5px;\n      font-family: $typeface-primary;\n      font-size: 1.1rem;\n      width: calc(100% - 2rem);\n      height: 100%;\n      color: $color-background;\n      display: flex;\n      align-items: center;\n\n      @include media($break-sm) {\n        width: calc(100% - 0.5rem);\n      }\n\n      .lang-option {\n        background-color: transparent;\n        text-align: auto;\n      }\n    }\n  }\n\n  .random-button-container {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n\n    @include media($break-sm) {\n      flex: initial;\n    }\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.1);\n    }\n\n    &.disabled {\n      pointer-events: none;\n      background-color: rgba(0, 0, 0, 0.1);\n    }\n\n    .random-button {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 100%;\n      border: none;\n      font-family: $typeface-primary;\n      color: $color-background;\n      background-color: transparent;\n      font-size: 1.1rem;\n      padding: 0 1rem;\n      width: 100%;\n      text-align: center;\n      cursor: pointer;\n      transition: all 0.1s ease-out;\n\n      span {\n        margin-right: 0.5rem;\n      }\n\n      @include media($break-sm) {\n        font-size: 0;\n        padding: 0;\n        width: 24px;\n\n        span {\n          font-size: 1.2rem;\n          margin-right: 0;\n        }\n      }\n    }\n  }\n\n  .search-bar-button-container, .random-button-container {\n    @include media($break-sm) {\n      position: relative;\n      width: 3rem;\n\n      &::before {\n        content: '';\n        position: absolute;\n        border-left: 1px solid rgba(42, 71, 46, 0.4);\n        left: 0;\n        top: 50%;\n        height: 60%;\n        transform: translateY(-50%);\n      }\n    }\n  }\n\n  .initial-message-hover {\n    color: $color-background;\n    position: absolute;\n    top: -0.5rem;\n    right: 0;\n    cursor: default;\n    transition: all 0.1s ease-out;\n    z-index: 3;\n    transform: translateY(-100%);\n\n    &:hover {\n      transform: translateY(-100%) scale(1.1);\n    }\n\n    span {\n      vertical-align: bottom;\n      font-size: 1.25rem;\n    }\n\n    @include media($break-sm) {\n      right: 0;\n      top: 0;\n\n      span {\n        padding: 0.3rem;\n      }\n    }\n  }\n}\n\n","@use '../../styles/constants.scss' as *;\n\n.arbor-chart {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n  filter: drop-shadow(32px 32px 4px rgba(0, 0, 0, 0.2));\n  transition: all 0.2s ease-out;\n\n  &.hidden {\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  a {\n    cursor: pointer;\n  }\n}\n\n.initial-message {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  line-height: 2;\n  font-size: 1.2rem;\n  color: $color-background;\n  transition: all 0.2s ease-out;\n  width: max-content;\n\n  &.hidden {\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  @include media($break-sm) {\n    width: 80%;\n    text-align: center;\n    line-height: 1.1;\n    font-size: 1.5rem;\n\n    span {\n      margin: 0.75rem 0;\n    }\n  }\n}\n","@use '../../styles/constants.scss' as *;\n\n.definitions {\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  box-sizing: border-box;\n  transition: opacity 0.2s ease-out;\n  padding: 1.5rem;\n\n  &.hidden {\n    opacity: 0;\n  }\n  \n  .scroller {\n    padding: 0 1.5rem 3rem 0;\n    width: calc(100% + 1rem + 25px);\n    height: calc(100% - 25px);\n    overflow: scroll;\n    box-sizing: border-box;\n  }\n\n  .not-found {\n    margin-top: 1rem;\n  }\n\n  .arrow {\n    transition: transform 0.1s ease-out;\n\n    &.less {\n      transform: rotate(180deg);\n    }\n  }\n\n  .part-of-speech {\n    overflow: hidden;\n  }\n\n  span {\n    vertical-align: text-top;\n  }\n\n  h2, h4 {\n    font-family: $typeface-secondary;\n  }\n\n  h2 {\n    margin-bottom: 0;\n    margin-top: 0;\n  }\n\n  h4 {\n    margin-top: 0;\n  }\n\n  h3 {\n    color: $color-background;\n    margin: 1rem 0 0.5rem;\n    cursor: pointer;\n  }\n\n  ol {\n    margin: 0;\n    padding: 0 0 0 1.5rem;\n  }\n\n  li {\n    font-family: $typeface-secondary;\n    line-height: 1.5;\n  }\n\n  span.maintenance-line {\n    display: none;\n  }\n\n  a {\n    color: $color-background;\n  }\n}\n","@use '../../styles/constants.scss' as *;\n\n.information-panel {\n  position: relative;\n  max-height: 6.5rem;\n  width: 250px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: stretch;\n  box-sizing: border-box;\n  border-radius: $border-radius;\n  background-color: rgba(255, 255, 255, 0.4);\n  box-shadow: 2px 2px 8px 2px rgba(25, 25, 25, 0.3);\n  z-index: 3;\n  backdrop-filter: blur(4px);\n  transition: opacity 0.1s ease-out, max-height 0.4s ease-out;\n  opacity: 0;\n  pointer-events: none;\n\n  @include media($break-sm) {\n    width: 100%;\n  }\n\n  &.open {\n    max-height: calc(75vh - 45px);\n  }\n\n  &.show {\n    opacity: 1;\n    pointer-events: all;\n  }\n\n  .info-hover {\n    color: $color-background;\n    position: absolute;\n    bottom: 1rem;\n    right: 1rem;\n    cursor: default;\n    opacity: 0;\n    transition: all 0.1s ease-out;\n    pointer-events: none;\n    z-index: 3;\n    \n    &.show {\n      opacity: 1;\n      pointer-events: all;\n\n      &:hover {\n        transform: scale(1.1);\n      }\n    }\n\n    span {\n      vertical-align: bottom;\n      font-size: 1.25rem;\n    }\n  }\n\n  .info-content {\n    transition: all 0.1s ease-out;\n    padding: 1rem;\n    box-sizing: border-box;\n    \n    &.absolute {\n      opacity: 0;\n      pointer-events: none;\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      width: 100%;\n      transform: translate(-50%, -50%);\n      z-index: 2;\n\n      &.open {\n        opacity: 1;\n        pointer-events: all;\n      }\n    }\n  }\n\n  .contents {\n    position: relative;\n    width: 100%;\n    height: 100%;\n  }\n\n  .loader {\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    transition: opacity 0.2s ease-out;\n    z-index: 2;\n    height: 100%;\n\n    &.hidden {\n      opacity: 0;\n      pointer-events: none;\n    }\n\n    img {\n      width: 65%;\n      filter: saturate(0.3) brightness(0.65);\n    }\n  }\n\n  .definitions-container {\n    height: 100%;\n    transition: all 0.1s ease-out;\n\n    &.hidden {\n      opacity: 0;\n    }\n  }\n\n  .mobile-arrow {\n    position: absolute;\n    top: 0.5rem;\n    right: 0.5rem;\n    padding: 0.5rem;\n    z-index: 3;\n\n    span {\n      transform: rotate(0);\n      transition: all 0.2s ease-out;\n    }\n\n    &.open {\n      span {\n        transform: rotate(180deg);\n      }\n    }\n  }\n}\n","@use '../../styles/constants.scss' as *;\n\n.layout {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  background:\n    radial-gradient(\n      circle at 100% 0,\n      rgba(255, 255, 255, 1),\n      rgba(49, 49, 49, 0.25) 90.71%\n    ),\n    radial-gradient(\n      circle at 100% 100%,\n      rgba(0, 136, 0, 0.15),\n      rgba(0, 255, 0, 0) 80.71%\n    ),\n    radial-gradient(\n      circle at 15% 65%,\n      rgba(88, 56, 30, 0.25),\n      rgba(0, 0, 0, 0) 80.71%\n    );\n\n  .top {\n    width: 100%;\n    height: 100%;\n    display: flex;\n  }\n\n  .bottom {\n    display: flex;\n    flex-direction: column;\n    width: calc(100% - (2 * 45px));\n    padding: 45px 45px 0;\n\n    @include media($break-sm) {\n      padding: 0;\n      width: 100%;\n    }\n  }\n  \n  .left {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    height: 100%;\n    width: 250px;\n    margin: 0 45px;\n\n    @include media($break-sm) {\n      width: 100%;\n      margin: 0 15px;\n    }\n  }\n  \n  .chart-wrapper {\n    position: relative;\n    flex: 1;\n  }\n}\n\n","@use '../../styles/constants.scss' as *;\n\n.title {\n  color: $color-background;\n  font-size: 2.5rem;\n  text-shadow: 2px 2px 2px rgba(25, 25, 25, 0.2);\n  z-index: 3;\n  margin-top: 45px;\n  \n  @include media($break-sm) {\n    margin: 15px 0;\n  }\n}\n","@use '../../styles/constants.scss' as *;\n\n.footer {\n  display: flex;\n  justify-content: right;\n  align-items: center;\n  height: 45px;\n  font-size: 0.9rem;\n\n  @include media($break-sm) {\n    display: none;\n  }\n\n  .icons {\n    margin-left: 0.5rem;\n  }\n\n  .icon {\n    border: none;\n    background-color: transparent;\n    width: 20px;\n    padding: 0;\n    cursor: pointer;\n\n    &:hover {\n      transform: scale(1.1);\n    }\n\n    img {\n      width: 100%;\n    }\n  }\n}\n","@use './constants.scss' as *;\n\nhtml, body {\n  font-family: $typeface-primary;\n  background-color: $color-white;\n}\n"],"names":[],"sourceRoot":""}